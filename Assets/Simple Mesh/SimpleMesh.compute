// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Vertex
{
    float3 position;
    float3 normal;
    float2 uv;
};

RWStructuredBuffer<Vertex> VertexBuffer;

int DispatchSizeX;
int DispatchSizeY;
float Size;

#define DISPATCH_SIZE_X (DispatchSizeX) // Must match the parameters to the dispatch call
#define DISPATCH_SIZE_Y (DispatchSizeY) // Must match the parameters to the dispatch call
#define NUM_THREADS_X 2
#define NUM_THREADS_Y 2
#define GROUP_SIZE_X (DISPATCH_SIZE_X * NUM_THREADS_X)
#define GROUP_SIZE_Y (DISPATCH_SIZE_Y * NUM_THREADS_Y)
#define BLOCK_THREADS_COUNT (NUM_THREADS_X * NUM_THREADS_Y)

[numthreads(NUM_THREADS_X, NUM_THREADS_Y, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    int vertexIndex = id.x + (GROUP_SIZE_X * id.y);

    float halfSize = Size * 0.5f;

    Vertex vertexData;
    vertexData.position = float3((id.x * Size) - halfSize, (id.y * Size) - halfSize, 0);
    vertexData.normal = float3(0.0f, 0.0f, 1.0f);
    vertexData.uv = float2(id.x, id.y);

    VertexBuffer[vertexIndex] = vertexData;
}

