// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Vertex {
    float3 position;
    float3 normal;
    float2 uv;
};

AppendStructuredBuffer<Vertex> VertexBuffer;

int DispatchSizeX;
int DispatchSizeY;
float Size;

#define DISPATCH_SIZE_X (DispatchSizeX) // Must match the parameters to the dispatch call
#define DISPATCH_SIZE_Y (DispatchSizeY) // Must match the parameters to the dispatch call
#define NUM_THREADS_X 1
#define NUM_THREADS_Y 1
#define GROUP_SIZE_X (DISPATCH_SIZE_X * NUM_THREADS_X)
#define GROUP_SIZE_Y (DISPATCH_SIZE_Y * NUM_THREADS_Y)
#define BLOCK_THREADS_COUNT (NUM_THREADS_X * NUM_THREADS_Y)

void AddVertexToBuffer(float x, float y, float2 uv) {
    Vertex vertexData;
    vertexData.position = float3(x, y, 0);
    vertexData.normal = float3(0.0f, 0.0f, 1.0f);
    vertexData.uv = float2(uv.x, uv.y);

    VertexBuffer.Append(vertexData);
}

[numthreads(NUM_THREADS_X, NUM_THREADS_Y, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	int vertexIndex = id.x + (GROUP_SIZE_X * id.y);

	// Add six vertices to the buffer to create two triangles as a quad.
	// NOTE: The DrawProcedural methods are not indexed vertices so we need to use duplicates in this case.
    AddVertexToBuffer(-Size, -Size, float2(0, 0));
    AddVertexToBuffer(-Size, Size, float2(0, 1));
    AddVertexToBuffer(Size, -Size, float2(1, 0));
    AddVertexToBuffer(Size, -Size, float2(1, 0));
    AddVertexToBuffer(-Size, Size, float2(0, 1));
    AddVertexToBuffer(Size, Size, float2(1, 1));
}

