// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

Texture2D SourceTextureA;
Texture2D SourceTextureB;

SamplerState PointClampSampler;

RWStructuredBuffer<float3> FloatBuffer;
RWTexture2D<float4> RenderTexture;

int DispatchSizeX;
int DispatchSizeY;
int NumThreadsX;
int NumThreadsY;

#define DISPATCH_SIZE_X (DispatchSizeX) // Must match the parameters to the dispatch call
#define DISPATCH_SIZE_Y (DispatchSizeY) // Must match the parameters to the dispatch call
#define NUM_THREADS_X 4
#define NUM_THREADS_Y 4
#define GROUP_SIZE_X (DISPATCH_SIZE_X * NUM_THREADS_X)
#define GROUP_SIZE_Y (DISPATCH_SIZE_Y * NUM_THREADS_Y)
#define BLOCK_THREADS_COUNT (NUM_THREADS_X * NUM_THREADS_Y)

[numthreads(NUM_THREADS_X, NUM_THREADS_Y, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float textureWidth, textureHeight;
    SourceTextureA.GetDimensions(textureWidth, textureHeight);
    float2 textureDimensions = float2(textureWidth, textureHeight);

    float blockWidth = 1.0f / GROUP_SIZE_X;
    float blockHeight = 1.0f / GROUP_SIZE_Y;

    float texelOffsetX = id.x * blockWidth;
    float texelOffsetY = id.y * blockHeight;
    float2 initialTexCoord = float2(texelOffsetX, texelOffsetY);

    float texelWidth = blockWidth / NUM_THREADS_X;
    float texelHeight = blockHeight / NUM_THREADS_Y;

	// The index is calculated based on the current x offset plus the numthreads in x * dispatch parameter in x * offset in y
    int floatBufferIndex = id.x + (GROUP_SIZE_X * id.y);

	// Sample the texture multiple times and obtain the average pixel colour difference
    float4 diff, accumulatedDiff, pixelA, pixelB;
    float2 texCoord;
	
    for (int x = 0; x < NUM_THREADS_X; x++) {
        for (int y = 0; y < NUM_THREADS_Y; y++) {
            texCoord = initialTexCoord + float2(x * texelWidth, y * texelHeight);
            pixelA = SourceTextureA.SampleLevel(PointClampSampler, texCoord, 0);
            pixelB = SourceTextureB.SampleLevel(PointClampSampler, texCoord, 0);

            diff = abs(pixelB - pixelA);
			// Fill the pixel with the pixel colout difference for testing
            RenderTexture[texCoord * textureDimensions] = float4(diff.xyz, 1.0f);
            accumulatedDiff += diff;
        }
    }
    FloatBuffer[floatBufferIndex] = accumulatedDiff.xyz / BLOCK_THREADS_COUNT;
}
